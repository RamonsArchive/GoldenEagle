
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AuthenticatedUserScalarFieldEnum = {
  id: 'id',
  s3Key: 's3Key',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  lastLogin: 'lastLogin',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectTicketScalarFieldEnum = {
  id: 'id',
  s3Key: 's3Key',
  name: 'name',
  email: 'email',
  phone: 'phone',
  zipCode: 'zipCode',
  projectType: 'projectType',
  projectStart: 'projectStart',
  projectStatus: 'projectStatus',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CareerTicketScalarFieldEnum = {
  id: 'id',
  s3Key: 's3Key',
  name: 'name',
  email: 'email',
  phone: 'phone',
  resumeUrl: 'resumeUrl',
  resumeName: 'resumeName',
  resumeSize: 'resumeSize',
  resumeType: 'resumeType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  s3Key: 's3Key',
  url: 'url',
  filename: 'filename',
  alt: 'alt',
  title: 'title',
  width: 'width',
  height: 'height',
  size: 'size',
  mimeType: 'mimeType',
  category: 'category',
  isBackdrop: 'isBackdrop',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImageCollectionScalarFieldEnum = {
  id: 'id',
  s3Key: 's3Key',
  name: 'name',
  description: 'description',
  category: 'category',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.AuthenticatedUserOrderByRelevanceFieldEnum = {
  id: 'id',
  s3Key: 's3Key',
  email: 'email',
  passwordHash: 'passwordHash'
};

exports.Prisma.ProjectTicketOrderByRelevanceFieldEnum = {
  id: 'id',
  s3Key: 's3Key',
  name: 'name',
  email: 'email',
  phone: 'phone',
  zipCode: 'zipCode',
  message: 'message'
};

exports.Prisma.CareerTicketOrderByRelevanceFieldEnum = {
  id: 'id',
  s3Key: 's3Key',
  name: 'name',
  email: 'email',
  phone: 'phone',
  resumeUrl: 'resumeUrl',
  resumeName: 'resumeName'
};

exports.Prisma.ImageOrderByRelevanceFieldEnum = {
  id: 'id',
  s3Key: 's3Key',
  url: 'url',
  filename: 'filename',
  alt: 'alt',
  title: 'title',
  mimeType: 'mimeType'
};

exports.Prisma.ImageCollectionOrderByRelevanceFieldEnum = {
  id: 'id',
  s3Key: 's3Key',
  name: 'name',
  description: 'description'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  VIEWER: 'VIEWER'
};

exports.ProjectType = exports.$Enums.ProjectType = {
  CUSTOM_HOME: 'CUSTOM_HOME',
  BATHROOM_REMODEL: 'BATHROOM_REMODEL',
  KITCHEN_REMODEL: 'KITCHEN_REMODEL',
  FENCES: 'FENCES',
  PATIO: 'PATIO',
  FLOORING: 'FLOORING',
  PAINTING: 'PAINTING',
  ROOFING: 'ROOFING',
  CONCRETE: 'CONCRETE',
  WINDOWS: 'WINDOWS',
  OTHER: 'OTHER'
};

exports.ProjectStart = exports.$Enums.ProjectStart = {
  ASAP: 'ASAP',
  NEXT_3_MONTHS: 'NEXT_3_MONTHS',
  NEXT_6_MONTHS: 'NEXT_6_MONTHS',
  NEXT_6_MONTHS_PLUS: 'NEXT_6_MONTHS_PLUS'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  UNCONFIRMED: 'UNCONFIRMED',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.FileType = exports.$Enums.FileType = {
  PDF: 'PDF',
  DOC: 'DOC',
  DOCX: 'DOCX'
};

exports.Prisma.ModelName = {
  AuthenticatedUser: 'AuthenticatedUser',
  ProjectTicket: 'ProjectTicket',
  CareerTicket: 'CareerTicket',
  Image: 'Image',
  ImageCollection: 'ImageCollection'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
